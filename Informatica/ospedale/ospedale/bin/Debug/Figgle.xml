<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Figgle</name>
    </assembly>
    <members>
        <member name="T:Figgle.FiggleException">
            <summary>
            Type for exceptions raised by Figgle.
            </summary>
        </member>
        <member name="M:Figgle.FiggleException.#ctor(System.String)">
            <summary>
            Constructs a new Figgle exception.
            </summary>
            <param name="message">A message explaining the exception.</param>
        </member>
        <member name="T:Figgle.FiggleTextDirection">
            <summary>Enumeration of possible text directions.</summary>
        </member>
        <member name="F:Figgle.FiggleTextDirection.LeftToRight">
            <summary>Text flows from the left to the right.</summary>
        </member>
        <member name="F:Figgle.FiggleTextDirection.RightToLeft">
            <summary>Text flows from the right to the left.</summary>
        </member>
        <member name="T:Figgle.FiggleFont">
            <summary>
            Holds metadata and glyphs for rendering characters in this font.
            </summary>
        </member>
        <member name="P:Figgle.FiggleFont.Height">
            <summary>The height of each character, in rows.</summary>
        </member>
        <member name="P:Figgle.FiggleFont.Baseline">
            <summary>The number of rows from the top of the font to the baseline, excluding descenders.</summary>
            <remarks>Must be less than or equal to <see cref="P:Figgle.FiggleFont.Height"/>.</remarks>
        </member>
        <member name="P:Figgle.FiggleFont.Direction">
            <summary>The direction that text reads when rendered with this font.</summary>
        </member>
        <member name="M:Figgle.FiggleFont.Contains(System.Char)">
            <summary>Gets whether this font contains the specified character.</summary>
            <remarks>Note that during rendering, if a character is not found then a character with value zero will be used instead, if present.</remarks>
            <param name="c">The character to test for.</param>
            <returns><c>true</c> if the character is present, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Figgle.FiggleFont.Render(System.String,System.Nullable{System.Int32})">
            <summary>
            Renders <paramref name="message"/> using this font.
            </summary>
            <param name="message">The text to render.</param>
            <param name="smushOverride">Optional override for the smush settings. Defaults to <c>null</c>, meaning the font's default setting is used.</param>
            <returns></returns>
        </member>
        <member name="T:Figgle.FiggleFontParser">
            <summary>
            Parses FIGlet font files.
            </summary>
        </member>
        <member name="M:Figgle.FiggleFontParser.Parse(System.IO.Stream,Figgle.StringPool)">
            <summary>
            Parses a FIGlet font description stream, and returns a usable <see cref="T:Figgle.FiggleFont"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="pool">An optional string pool for merging identical string references.</param>
            <returns>The font described by the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:Figgle.FiggleException">The stream contained an error and could not be parsed.</exception>
        </member>
        <member name="T:Figgle.FiggleFonts">
            <summary>
            Collection of bundled fonts, ready for use.
            </summary>
            <remarks>
            Fonts are lazily loaded upon property access. Only the fonts you use will be loaded.
            <para />
            Fonts are stored as an embedded ZIP archive within the assembly.
            </remarks>
        </member>
        <member name="T:Figgle.StringPool">
            <summary>
            An object pool for merging references to identical strings.
            </summary>
            <remarks>
            Unlike string interning (which is not available in <c>netstandard1.3</c> anyway)
            the pool may be released and garbage collected.
            </remarks>
        </member>
        <member name="M:Figgle.StringPool.Pool(System.String)">
            <summary>
            Returns a reference to a string equal to <paramref name="s"/> from the pool.
            If no such string exists within the pool, it is added, and <paramref name="s"/> is returned.
            </summary>
            <param name="s">The string to pool.</param>
            <returns>A reference to the pooled string.</returns>
        </member>
    </members>
</doc>
